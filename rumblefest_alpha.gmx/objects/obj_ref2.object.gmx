<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init defaults

direction = point_direction(obj_player_2.x, obj_player_2.y, x, y)

image_speed = .2
speed = 8

is_in_corner = false

amount_to_move_left = 0
amount_to_move_right = 0

// Dimensions for ring, use whole screen since calcuating off ring bounds fucked up
ring_center_y = room_height / 2
ring_center_x = room_width / 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set amount to move left or right based on position

if (x &gt; ring_center_x) {
    amount_to_move_left = 100
} else {
    amount_to_move_right = 100
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change sprite based on direction

image_xscale = 1;

if (speed &gt; 0) {
    if (direction &gt;= 315 || direction &lt; 45) {
        sprite_index = spr_ref_right
    } else if (direction &gt;= 45 &amp;&amp; direction &lt; 135) {
        sprite_index = spr_ref_up
    } else if (direction &gt;= 135 &amp;&amp; direction &lt; 225) {
        image_xscale = -1
        sprite_index = spr_ref_right
    } else if (direction &gt;= 225 &amp;&amp; direction &lt; 315) {
        sprite_index = spr_ref_down
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If hitting out of bounds, change direction to go to a corner


if (!place_meeting(x + speed, y, obj_ring_bounds)) {
    // Right rope
    if (y &gt; ring_center_y) {
        direction = directions.DOWN
    } else {
        direction = directions.UP
    }
} else if (!place_meeting(x - speed, y, obj_ring_bounds)) {
    // Left rope
    if (y &gt; ring_center_y) {
        direction = directions.DOWN
    } else {
        direction = directions.UP
    }
} else if (!place_meeting(x, y - speed, obj_ring_bounds)) {
    // Top rope
    if (x &gt; ring_center_x) {
        direction = directions.RIGHT
    } else {
        direction = directions.LEFT
    }
} else if (!place_meeting(x, y + speed, obj_ring_bounds)) {
    // Bottom rope
    
    if (x &gt; ring_center_x) {
        direction = directions.RIGHT
    } else {
        direction = directions.LEFT
    }
}

// Corners
if (!place_meeting(x + speed, y, obj_ring_bounds)
    &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Top right corner
    speed = 0
    image_speed = .1
    sprite_index = spr_ref_standing_down
    alarm[0] = 3 * room_speed
} else if (!place_meeting(x + speed, y, obj_ring_bounds)
    &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Bottom right corner
    speed = 0
    image_speed = .1
    sprite_index = spr_ref_standing_up
    alarm[0] = 3 * room_speed
} else if (!place_meeting(x - speed, y, obj_ring_bounds)
    &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Top left corner
    speed = 0
    image_speed = .1
    sprite_index = spr_ref_standing_down
    alarm[0] = 3 * room_speed
} else if (!place_meeting(x - speed, y, obj_ring_bounds)
    &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Bottom right corner
    speed = 0
    image_speed = .1
    sprite_index = spr_ref_standing_up
    alarm[0] = 3 * room_speed
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If we have an amount to move, subtract from it and move that direction

if (amount_to_move_right &gt; 0) {
    speed = 8
    direction = directions.RIGHT
    
    amount_to_move_right -= speed
    image_speed = .1
    
    if (amount_to_move_right &lt;= 0) {
        direction = directions.LEFT
    }
    
} else if (amount_to_move_left &gt; 0) {
    speed = 8
    direction = directions.LEFT
    amount_to_move_left -= speed
    
    image_speed = .1
    
    if (amount_to_move_left &lt;= 0) {
        direction = directions.RIGHT
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change depth based on position

depth = -500 - y
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
