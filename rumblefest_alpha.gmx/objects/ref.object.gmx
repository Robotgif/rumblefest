<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spr_prefix = "spr_ref_";

direction = directions.DOWN;

isColliding = false;

// For sticking to corners
isSticking = false;
shouldStick = true;

// So alarms know which way to move
directionBackToCorner = directions.LEFT;

defaultSpeed = 8;
speed = defaultSpeed;
image_speed = .2

// Use bounds instead of colliding with objects
leftBound = 113;
rightBound = 660;
bottomBound = 630;
topBound = 180;

centerX = room_width / 2;
centerY = room_height / 2;

lastCollision = "none";

event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move back to corner
direction = directionBackToCorner;
shouldStick = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move a little bit when in corner, then trigger alarm to move back
speed = defaultSpeed

// Choose direction based on position
if (x &gt;= rightBound) {
    direction = directions.LEFT;
    directionBackToCorner = directions.RIGHT;
} else {
    direction = directions.RIGHT;
    directionBackToCorner = directions.LEFT;
}

isSticking = false;

alarm[1] = room_speed * 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hit Bounds

// Create a bounding box with our set dimensions, then detect if the ref leaves that box to trigger collision events 
colliding = collision_rectangle(leftBound, topBound, rightBound, bottomBound, self, false, false);
if !colliding &amp;&amp; !isSticking &amp;&amp; shouldStick {
    
    // Keep track of "lastCollision" so we only change direction when we hit a boundary
    if (y &lt;= topBound &amp;&amp; lastCollision != "top") {
        if (x &lt;= centerX) {
            direction = directions.LEFT;
        } else {
            direction = directions.RIGHT;
        }
        
        lastCollision = "top";
        event_user(1)
    } 
    else if (y &gt;= bottomBound &amp;&amp; lastCollision != "bottom") {
        if (x &lt;= centerX) {
            direction = directions.LEFT;
        } else {
            direction = directions.RIGHT;
        }
        lastCollision = "bottom"
        event_user(1)
    }
    else if (x &lt;= leftBound &amp;&amp; lastCollision != "left") {
        if (y &lt;= centerY) {
            direction = directions.UP;
        } else {
            direction = directions.DOWN;
        }
        lastCollision = "left";
        
        event_user(2)
    }
    else if (x &gt;= rightBound &amp;&amp; lastCollision != "right") {
        if (y &lt;= centerY) {
            direction = directions.UP;
        } else {
            direction = directions.DOWN;
        }
        lastCollision = "right";
        
        event_user(2)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update sprite based on state

lookDirection = 0

if (instance_exists(obj_player)) {
    lookDirection = point_direction(obj_player.x, obj_player.y, x, y);
}

if (lookDirection &gt;= 45 &amp;&amp; lookDirection &lt; 135) {
    sprite_index = asset_get_index(spr_prefix + "down");
} else if (lookDirection &gt;= 135 &amp;&amp; lookDirection &lt; 225) {
    sprite_index = asset_get_index(spr_prefix + "left_right");
    image_xscale = 1;
} else if (lookDirection &gt; 225 &amp;&amp; lookDirection &lt; 315) {
    sprite_index = asset_get_index(spr_prefix + "up");
} else {
    sprite_index = asset_get_index(spr_prefix + "left_right");
    image_xscale = -1
}


/// Change depth based on y value

depth = -500 - y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stick in corner for a little bit
if (x &lt;= leftBound || x &gt;= rightBound) &amp;&amp; (y &lt;= topBound || y &gt;= bottomBound) &amp;&amp; shouldStick  {
    direction = 0;
    speed = 0;
    isSticking = true;
    alarm[0] = room_speed * 2;
    shouldStick = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go back to roaming mode
x = x - 6;
isSticking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move along right or left ropes

if (y &lt;= topBound) {
    direction = directions.DOWN;
} else if (y &gt;= bottomBound) {
    direction = directions.UP;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move along top or bottom ropes
// Add some padding so up/down and left/right triggers don't both happen

// At bounds, switch direction
if (x &gt;= rightBound) {
    direction = directions.LEFT;
} else if (x &lt;= leftBound) {
    direction = directions.RIGHT;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move away from player
if (instance_exists(obj_player)) {
    direction = point_direction(obj_player.x, obj_player.y, x, y)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
