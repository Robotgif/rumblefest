<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spr_prefix = "spr_ref_";

direction = directions.DOWN;

isColliding = false;

// For sticking to corners
isSticking = false;
shouldStick = true;

// When player gets close
shouldMoveToMiddle = false;
movingToMiddle = false;

// So alarms know which way to move
directionBackToCorner = directions.LEFT;

previousSpeed = 0;

// Need to explictly set these ahead of time
previousAlarms[0] = alarm[0];
previousAlarms[1] = alarm[1];
previousAlarms[2] = alarm[2];

enemiesToCount = 0;
isCounting = false;
isVulnerable = false;
isHurt = false;

defaultSpeed = 8;
speed = defaultSpeed;
image_speed = .2

// Use bounds instead of colliding with objects
leftBound = 123;
rightBound = 650;
bottomBound = 620;
topBound = 190;

centerX = room_width / 2;
centerY = room_height / 2;

distanceThreshold = 90;

lastCollision = "none";

event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set alarms back to where they were before enemy eliminated
alarm[0] = previousAlarms[0]
alarm[1] = previousAlarms[1]
alarm[2] = previousAlarms[2]

speed = previousSpeed;
direction = previousDirection;
isCounting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wake up from dazed, go back to normal mode

// TODO: End game if seeing player with chair

// Set back to "default" state
// For sticking to corners
isSticking = false;
shouldStick = true;
shouldMoveToMiddle = false;
movingToMiddle = false;
isHurt = false;
isVulnerable = false;
isColliding = false;
isCounting = false;
speed = defaultSpeed;
lastCollision = "";
event_user(0)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get up from dazed
sprite_index = spr_ref_wakeup;
image_speed = .2;

alarm[6] = 2 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go down, then start count 
sprite_index = spr_ref_hurtdown;

// Cancel other alarms going on
alarm[0] = -1;
alarm[1] = -1;
alarm[2] = -1;
alarm[3] = -1;


alarm[5] = 2 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show count animation for each enemy eliminated

if (enemiesToCount &gt; 0) {
    // TODO: Make this faster
    alarm[3] = 3 * room_speed;
    isVulnerable = true;
} else {
    alarm[11] = 1;
    isVulnerable = false;
}
enemiesToCount--
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// After moving towards middle when player gets close
movingToMiddle = false;
shouldMoveToMiddle = false;
isSticking = false;
shouldStick = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move back to corner
direction = directionBackToCorner;
speed = defaultSpeed;


shouldStick = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move a little bit when in corner, then trigger alarm to move back
speed = defaultSpeed

// Choose direction based on position
if (x &gt;= rightBound) {
    direction = directions.LEFT;
    directionBackToCorner = directions.RIGHT;
} else {
    direction = directions.RIGHT;
    directionBackToCorner = directions.LEFT;
}

isSticking = false;

alarm[1] = room_speed * 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update sprite based on state

// Return if hurt 
if (isHurt) {
    exit;
}

lookDirection = 0
image_speed = .2


if (instance_exists(obj_player)) {
    lookDirection = point_direction(obj_player.x, obj_player.y, x, y);
}

if (lookDirection &gt;= 45 &amp;&amp; lookDirection &lt; 135) {
    sprite_index = asset_get_index(spr_prefix + "down");
} else if (lookDirection &gt;= 135 &amp;&amp; lookDirection &lt; 225) {
    sprite_index = asset_get_index(spr_prefix + "left_right");
    image_xscale = 1;
} else if (lookDirection &gt; 225 &amp;&amp; lookDirection &lt; 315) {
    sprite_index = asset_get_index(spr_prefix + "up");
} else {
    sprite_index = asset_get_index(spr_prefix + "left_right");
    image_xscale = -1
}

// Counting overrides other sprite animations
if (instance_exists(obj_player) &amp;&amp; isCounting) {
    image_speed = 4 / room_speed;
    if (y &gt;= obj_player.y) {
        sprite_index = asset_get_index(spr_prefix + "count_up");
    } else {
        sprite_index = asset_get_index(spr_prefix + "count_down");
    }
}


/// Change depth based on y value

depth = -500 - y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hit Bounds


// Create a bounding box with our set dimensions, then detect if the ref leaves that box to trigger collision events 
colliding = collision_rectangle(leftBound, topBound, rightBound, bottomBound, self, false, false);
if !colliding &amp;&amp; !isSticking &amp;&amp; shouldStick {
    
    // Keep track of "lastCollision" so we only change direction when we hit a boundary
    if (y &lt;= topBound &amp;&amp; lastCollision != "top") {
        if (x &lt;= centerX) {
            direction = directions.LEFT;
        } else {
            direction = directions.RIGHT;
        }
        
        lastCollision = "top";
        event_user(1)
    } 
    else if (y &gt;= bottomBound &amp;&amp; lastCollision != "bottom") {
        if (x &lt;= centerX) {
            direction = directions.LEFT;
        } else {
            direction = directions.RIGHT;
        }
        lastCollision = "bottom"
        event_user(1)
    }
    else if (x &lt;= leftBound &amp;&amp; lastCollision != "left") {
        if (y &lt;= centerY) {
            direction = directions.UP;
        } else {
            direction = directions.DOWN;
        }
        lastCollision = "left";
        
        event_user(2)
    }
    else if (x &gt;= rightBound &amp;&amp; lastCollision != "right") {
        if (y &lt;= centerY) {
            direction = directions.UP;
        } else {
            direction = directions.DOWN;
        }
        lastCollision = "right";
        
        event_user(2)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stick in corner for a little bit
if (x &lt;= leftBound || x &gt;= rightBound) &amp;&amp; (y &lt;= topBound || y &gt;= bottomBound) &amp;&amp; shouldStick  {
    direction = 0;
    speed = 0;
    
    // Set flags
    isSticking = true;
    shouldStick = false;
    shouldMoveToMiddle = true;
    
    alarm[0] = room_speed * 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If player hits distance threshold, go past him then go to initial state
distance = distance_to_object(obj_player)

if (distance &lt; distanceThreshold &amp;&amp; !movingToMiddle &amp;&amp; shouldMoveToMiddle) {
    direction = point_direction(x, y, centerX, centerY)
    speed = defaultSpeed;
    movingToMiddle = true;
    
    // Reset other alarms
    alarm[0] = -1;
    alarm[1] = -1;
    
    alarm[2] = 1.5 * room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Call event if user hits ref when vulnerable
// DEBUG: Always vulnerable
if (isVulnerable || true) {
    if (instance_exists(obj_player) &amp;&amp; position_meeting(x, y, obj_player)) {
        isVulnerable = false;
        event_user(5)
        
        // Call event on manager
        with (manager_obj) {
            event_user(1)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ref hit when vulnerable
isHurt = true;
speed = 0;
sprite_index = spr_ref_hit;

// Go down after half second
alarm[4] = .5 * room_speed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy eliminated, trigger animation

// Save current alarm values, then cancel them all and restart after next alarm fires

// TODO: Fix bug when eliminating 2 enemies at once
if alarm[0] &gt; 0 previousAlarms[0] = alarm[0];
if alarm[1] &gt; 0 previousAlarms[1] = alarm[1];
if alarm[2] &gt; 0 previousAlarms[2] = alarm[2];


previousSpeed = speed;
previousDirection = direction;

alarm[0] = -1;
alarm[1] = -1;
alarm[2] = -1;

speed = 0;

enemiesToCount = global.enemiesEliminated;
isCounting = true;
image_index = 0;
alarm[3] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go back to roaming mode
x = x - 6;
isSticking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move along right or left ropes

if (y &lt;= topBound) {
    direction = directions.DOWN;
} else if (y &gt;= bottomBound) {
    direction = directions.UP;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move along top or bottom ropes
// Add some padding so up/down and left/right triggers don't both happen

// At bounds, switch direction
if (x &gt;= rightBound) {
    direction = directions.LEFT;
} else if (x &lt;= leftBound) {
    direction = directions.RIGHT;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move away from player
if (instance_exists(obj_player)) {
    direction = point_direction(obj_player.x, obj_player.y, x, y)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
