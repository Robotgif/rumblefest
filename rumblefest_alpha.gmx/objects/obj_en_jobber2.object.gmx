<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_en_generic2</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init jobber
event_inherited()

sprite_prefix = "jobber_1_"
is_vulnerable = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go back to roaming
speed = 4
is_hit = false
is_vulnerable = true

// Choose new direction

direction = choose(directions.RIGHT, directions.LEFT, directions.UP, directions.DOWN)


// Conditional checks, don't change direction to go into ropes
if (!place_meeting(x - speed, y, obj_ring_bounds)) {
    // Left bounds
    direction = choose(directions.RIGHT, directions.UP, directions.DOWN)
} else if (direction == directions.RIGHT &amp;&amp; !place_meeting(x + speed, y, obj_ring_bounds)) {
    // Right bounds
    direction = choose(directions.UP, directions.LEFT, directions.DOWN)
} else if (direction == directions.DOWN &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Down bounds
    direction = choose(directions.UP, directions.LEFT, directions.RIGHT)
} else if (direction == directions.UP &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Up bounds
    direction = choose(directions.DOWN, directions.LEFT, directions.RIGHT)
}

// Corner checks
if (!place_meeting(x - speed, y, obj_ring_bounds) &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Top left bounds
    direction = choose(directions.RIGHT, directions.DOWN)
} else if (!place_meeting(x + speed, y, obj_ring_bounds) &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Top Right bounds
    direction = choose(directions.LEFT, directions.DOWN)
} else if (!place_meeting(x + speed, y, obj_ring_bounds) &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Down bounds
    direction = choose(directions.UP, directions.LEFT)
} else if (!place_meeting(x - speed, y, obj_ring_bounds) &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Up bounds
    direction = choose(directions.UP, directions.RIGHT)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherit base functions

event_inherited()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Override normal logic for vulnerable/not vulnerable

// Normally when we're roaming we're NOT vulnerable, but the reverse is true for jobbers
if (is_vulnerable &amp;&amp; !is_eliminated &amp;&amp; !is_hit) {
    if (direction == directions.UP) {
        sprite_index = asset_get_index(sprite_prefix + "up")
    } else if (direction == directions.DOWN) {
        sprite_index = asset_get_index(sprite_prefix + "down")
    } else if (direction == directions.LEFT) {
        sprite_index = asset_get_index(sprite_prefix + "left")
    } else if (direction == directions.RIGHT) {
        sprite_index = asset_get_index(sprite_prefix + "right")
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colliding with enemy
if (!is_hit &amp;&amp; !is_vulnerable) {
    // TODO: Push back player
    

} else if (!is_hit &amp;&amp; is_vulnerable) {
    direction = collision_direction
    is_hit = true
    
    if (direction == directions.DOWN) {
        sprite_index = asset_get_index(sprite_prefix + "hit_down")
    } else {
        sprite_index = asset_get_index(sprite_prefix + "hit_up")
    }
    
    // Call alarm to get pushed back
    
    moveBackDistance = 100
    moveBackDuration = .5
    
    speed = (moveBackDistance / room_speed) / moveBackDuration
    
    // After being hit go back to moving
    alarm[0] = moveBackDuration * room_speed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
