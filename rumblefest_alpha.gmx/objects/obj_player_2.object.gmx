<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set initial variables for player

speed = 0
image_speed = 0
sprite_index = spr_player_stand


// When hit, set flashing to true which makes player invincible for short time
flashing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screen shake

view_object[0] = noone;

randX = random_range(-10, 10)
randY = random_range(-10, 10)

view_xview[0] = 0 + randX
view_yview[0] = 0 + randY

shakeAmount--
if (shakeAmount &gt; 0) {
    alarm[11] = room_speed * 0.05
} else {
    view_xview[0] = 0
    view_yview[0] = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set player to not flashing after a certain amount of time

flashing = false
image_alpha = 1

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset keyboard control after bouncing off ropes

global.overrideLastKey = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm for moving player back after being hit
// moveBackAmount will decrease as this is called to slide the player back

// Don't do anything if we're getting back in
if (state != GETTING_BACK_IN) {


moveDirection = 0;
// collisionDirection is rounded, so find closest arrow direction to move in
if (collisionDirection &gt; 45 &amp;&amp; collisionDirection &lt; 135) {
    moveDirection = 90;
} else if (collisionDirection &gt;= 135 &amp;&amp; collisionDirection &lt; 225) {
    moveDirection = 180;
} else if (collisionDirection &gt;= 225 &amp;&amp; collisionDirection &lt; 305) {
    moveDirection = 270;
} else {
    moveDirection = 0;
}

if (moveBackAmount &gt; 0) {

    // Turn off normal player speed while getting knocked back
    speed = 0;

    // Move player depending on which way they are facing
    if (moveDirection == 0) {
        x = x - 7
    }
    if (moveDirection == 90) {
        y = y + 7
    }
    if (moveDirection == 180) {
        x = x + 7
    }
    if (moveDirection == 270) {
        y = y - 7
    }


    // Set character sprite to being hurt
    state = KNOCKED_BACK

    // Decrease our move back amount so we know when to stop (when it gets to 0)
    moveBackAmount = moveBackAmount - 1

    // Set collision index so we can go through enemies


    // Call this alarm again
    alarm[0] = 1
} else {
    // When moveBackAmount is at 0, set speed to normal if we still have hearts
    if (obj_heart_cont.hasHearts) {
        // Set character sprite to being hurt
        state = STILL
    } else {
        state = TIRED
    }

    // Set state back to moving after an amount of time
    // Note that we've turned this off for now so it fires right away
    alarm[1] = 1
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set direction/sprites based on keyboard input

// Reset default
image_xscale = 1;

// Change direction when hitting keyboard buttons
if (global.lastKeyPressed == "down"){
    direction = directions.DOWN
    sprite_index = spr_player_down
    mask_index = spr_mask_player_down
} else if (global.lastKeyPressed == "up"){
    direction = directions.UP
    sprite_index = spr_player_up
    mask_index = spr_mask_player_down
} else if (global.lastKeyPressed == "left"){
    direction = directions.LEFT
    sprite_index = spr_player_left
    mask_index = spr_mask_player_left
} else if (global.lastKeyPressed == "right"){
    direction = directions.RIGHT
    image_xscale = -1
    sprite_index = spr_player_left
    mask_index = spr_mask_player_right
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wall collisions

// Use uniform mask when detecting ring collisions 
oldMask = mask_index
mask_index = spr_player_down

if (direction == directions.LEFT &amp;&amp; !place_meeting(x - speed, y, obj_ring_bounds)) {
    // Left bounds
    show_debug_message('left')
    global.lastKeyPressed = "right"
    global.overrideLastKey = true
    alarm[1] = .2 * room_speed
    wiggly_ropes(direction)
} else if (direction == directions.RIGHT &amp;&amp; !place_meeting(x + speed, y, obj_ring_bounds)) {
    // Right bounds
    show_debug_message('right')
    global.lastKeyPressed = "left"
    global.overrideLastKey = true
    alarm[1] = .2 * room_speed
    wiggly_ropes(direction)
} else if (direction == directions.DOWN &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Down bounds
    show_debug_message('down')
    global.lastKeyPressed = "up"
    global.overrideLastKey = true
    alarm[1] = .2 * room_speed
    wiggly_ropes(direction)
} else if (direction == directions.UP &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Up bounds
    show_debug_message('up')
    global.lastKeyPressed = "down"
    global.overrideLastKey = true
    alarm[1] = .2 * room_speed
    wiggly_ropes(direction)
}

mask_index = oldMask



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flashing animation
if (flashing) {
    flashingCount++

    if (flashingCount mod 2 == 0) {
        image_alpha = .8
    } else {
        image_alpha = .3
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set speed based on our sprite

// Default speed
speed = 4;
image_speed = .1

if (sprite_index = spr_player_stand) {
    image_speed = 0
    speed = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change depth based on y value

depth = -500 - y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>-1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
