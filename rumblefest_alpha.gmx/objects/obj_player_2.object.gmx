<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set initial variables for player

speed = 0
image_speed = 0
sprite_index = spr_player_stand

is_hit = false
is_colliding_with_ropes = false
is_eliminated = false
collision_direction = 0


// When hit, set flashing to true which makes player invincible for short time
flashing = false


// debug
count = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm for screen shake
view_object[0] = noone;

randX = random_range(-10, 10)
randY = random_range(-10, 10)

view_xview[0] = 0 + randX
view_yview[0] = 0 + randY

shakeAmount--
if (shakeAmount &gt; 0) {
    alarm[11] = room_speed * 0.05
} else {
    view_xview[0] = 0
    view_yview[0] = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go back to normal after hit
is_hit = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move back from enemy hit
direction = collision_direction
is_hit = true

image_xscale = 1
if (direction == directions.UP) {
    sprite_index = spr_player_hit_up
} else if (direction == directions.DOWN) {
    sprite_index = spr_player_hit_down
} else if (direction == directions.LEFT) {
    sprite_index = spr_player_hit_left
} else if (direction == directions.RIGHT) {
    image_xscale = -1
    sprite_index = spr_player_hit_left
}

// Call alarm to get pushed back

moveBackDistance = 120
moveBackDuration = 1

speed = moveBackDistance / (moveBackDuration * room_speed)

// After being moved back, go to tired
alarm[3] = moveBackDuration * room_speed

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset keyboard control after bouncing off ropes

global.overrideLastKey = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to game over after being eliminated
room_goto(game_over)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Don't check anything else if we're eliminated
if (is_eliminated) {
    depth = -2001
    return true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set direction/sprites based on keyboard input

// Reset default
image_xscale = 1;

// Change direction when hitting keyboard buttons
if (!is_hit) {
    if (global.lastKeyPressed == "down"){
        direction = directions.DOWN
        sprite_index = spr_player_down
    } else if (global.lastKeyPressed == "up"){
        direction = directions.UP
        sprite_index = spr_player_up
    } else if (global.lastKeyPressed == "left"){
        direction = directions.LEFT
        sprite_index = spr_player_left
    } else if (global.lastKeyPressed == "right"){
        direction = directions.RIGHT
        image_xscale = -1
        sprite_index = spr_player_left
    }
    
    /// Set speed based on our sprite

    // Default speed
    speed = 4;
    image_speed = .1
    
    if (sprite_index = spr_player_stand) {
        image_speed = 0
        speed = 0
    }
}


// debug
/*
count++
if (count % 180 &lt; 90) {
    sprite_index = mask_index
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wall collisions

is_colliding_with_ropes = false

if (direction == directions.LEFT &amp;&amp; !place_meeting(x - speed, y, obj_ring_bounds)) {
    // Left bounds
    global.lastKeyPressed = "right"
    global.overrideLastKey = true
    alarm[1] = .2 * room_speed
    wiggly_ropes(direction)
    is_colliding_with_ropes = true
} else if (direction == directions.RIGHT &amp;&amp; !place_meeting(x + speed, y, obj_ring_bounds)) {
    // Right bounds
    global.lastKeyPressed = "left"
    global.overrideLastKey = true
    alarm[1] = .2 * room_speed
    wiggly_ropes(direction)
    is_colliding_with_ropes = true
} else if (direction == directions.DOWN &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Down bounds
    global.lastKeyPressed = "up"
    global.overrideLastKey = true
    alarm[1] = .2 * room_speed
    wiggly_ropes(direction)
    is_colliding_with_ropes = true
} else if (direction == directions.UP &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Up bounds
    global.lastKeyPressed = "down"
    global.overrideLastKey = true
    alarm[1] = .2 * room_speed
    wiggly_ropes(direction)
    is_colliding_with_ropes = true
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If is colliding with ropes AND being hurt, trigger elimination
if (is_colliding_with_ropes &amp;&amp; is_hit) {
    speed = 4
    image_index = 0
    image_xscale = 1
    is_eliminated = true
    image_speed = .1
    
    if (direction == directions.UP) {
        sprite_index = spr_player_elim_up
    } else if (direction == directions.DOWN) {
        sprite_index = spr_player_elim_down
    } else if (direction == directions.LEFT) {
        sprite_index = spr_player_elim_left
    } else if (direction == directions.RIGHT) {
        image_xscale = -1
        sprite_index = spr_player_elim_up
    }
    
    if (global.soundEnabled) {
        soundToPlay = choose(sound_wrestler_7)
        
        audio_play_sound(soundToPlay, 50, false);
    }
    
    // Go to game over
    alarm[0] = 2 * room_speed
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flashing animation
if (flashing) {
    flashingCount++

    if (flashingCount mod 2 == 0) {
        image_alpha = .8
    } else {
        image_alpha = .3
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change depth based on y value

depth = -500 - y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get hit by enemy

// Move back from enemy hit
if (!is_hit) {

    is_hit = true
    
    image_xscale = 1
    if (collision_direction == directions.UP) {
        direction = directions.UP
        sprite_index = spr_player_hit_up
    } else if (collision_direction == directions.DOWN) {
        direction = directions.DOWN
        sprite_index = spr_player_hit_down
    } else if (collision_direction == directions.LEFT) {
        direction = directions.LEFT
        sprite_index = spr_player_hit_left
    } else if (collision_direction == directions.RIGHT) {
        image_xscale = -1
        direction = directions.RIGHT
        sprite_index = spr_player_hit_left
    }
    
    image_index = 0
    image_speed = .05
    
    // Play punch sounds
    soundToPlay = choose(sound_hit_6, sound_hit_7, sound_hit_8)

    if (global.soundEnabled
        &amp;&amp; !audio_is_playing(sound_hit_6)
        &amp;&amp; !audio_is_playing(sound_hit_7)
        &amp;&amp; !audio_is_playing(sound_hit_8) ) {
        
        audio_play_sound(soundToPlay, 50, false);
    }
    
    // Call alarm to get pushed back
    
    moveBackDistance = 120
    moveBackDuration = .5
    
    speed = (moveBackDistance / room_speed) / moveBackDuration
    
    // After being moved back, go to normal
    alarm[3] = moveBackDuration * room_speed
    
    // Screen shake
    shakeAmount = 10
    alarm[11] = 1

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>-1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
