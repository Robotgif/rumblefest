<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>600</depth>
  <persistent>0</persistent>
  <parentName>obj_en_generic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// After 3 seconds go vulnerable
// TODO: Randomize this

event_inherited()

// TODO: Might want to rename this to spr_en_red
spritePrefix = "spr_en"

// Set to tired after random time 
timeToTired = random_range(6, 8)
alarm[0] = room_speed * timeToTired
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm to go back to roaming
// Only do this if we're still vulnerable, otherwise wait less time before roaming
// in case the player was punching then walked away
if (state == states.WAKING_UP) {
    state = states.ROAMING
    alarm[0] = room_speed * 4;
    
    // % time should go after player. Currently set at 100%
    aggressionIndex = 1
    randomNum = random_range(1, 100)
    shouldPursuePlayer = randomNum &gt;= aggressionIndex
    
    if (instance_exists(obj_player) &amp;&amp; shouldPursuePlayer) {
        playerDirection = point_direction(x, y, obj_player.x, obj_player.y)
        
        if (playerDirection &gt; 45 &amp;&amp; playerDirection &lt; 135) {
            moveDirection = 90;
        } else if (playerDirection &gt;= 135 &amp;&amp; playerDirection &lt; 225) {
            moveDirection = 180;
        } else if (playerDirection &gt;= 225 &amp;&amp; playerDirection &lt; 305) {
            moveDirection = 270;
        } else {
            moveDirection = 0;
        }
        
        direction = moveDirection;
        
    }
    
    
} else if (state != states.ELIMINATED) {
    alarm[1] = room_speed * 1.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Wake up
state = states.WAKING_UP

// After 2 seconds go back to normal if we're not being punched
alarm[2] = room_speed * 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm to set state to vunerable (tired)
state = states.VULNERABLE

// After 3 seconds go back to normal if we're not being punched
alarm[1] = room_speed * 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
