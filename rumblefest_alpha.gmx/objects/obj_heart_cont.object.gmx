<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>heart_container</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>751</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxHearts = 3 /// this sets players lives to 3
remainingHearts = maxHearts; // Set remaining hearts equal to total to begin
hasHearts = true // this changes to false when out of hearts

// Loop over lives (3 times) and add hearts to container
for (i = 0; i &lt; maxHearts; i += 1) {
    heart = instance_create(x, y, obj_heart);
    heart.y = 75;
    heart.x = heart.x + i * 50;
    heartArray[i] = heart;
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player runs into heart.  Add a life

// Loop through heart array, and add the first one that isn't full
for (i = maxHearts - 1; i &gt; -1; i -= 1) {
    heart = heartArray[i]
    
    hasHearts = true;
    
   if (heart.sprite_index == spr_empty_heart) {
        with (heart) {
            // Fill heart
            event_user(1)
        }
        // Calculate hearts left
        remainingHearts = maxHearts - i + 1;
        
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Loop through heart array, and remove the first one that isn't already removed
for (i = 0; i &lt; maxHearts; i += 1) {
    heart = heartArray[i]
    
    // Set player to tired if we loop through this as many times as lives
    if (i == maxHearts - 1) {
        hasHearts = false
    }
    
   if (heart.sprite_index != spr_empty_heart) {
        with (heart) {
            // Empty heart
            event_user(0)
        }
        // Calculate hearts left
        remainingHearts = maxHearts - i - 1;
        
        // Call event on manager to trigger timer for blowing hearts
        with (manager_obj) {
            event_user(0)
        }
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
