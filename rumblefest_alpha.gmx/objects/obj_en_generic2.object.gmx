<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init defaults

image_speed = .1
speed = 4
direction = directions.DOWN

is_colliding = false // With player
is_colliding_with_ropes = false
is_hit = false
is_eliminated = false
is_vulnerable = false

// debug
count = 0




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy instance
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If eliminated, don't do any other checks 
if (is_eliminated) {
    return true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set sprite based on direction

if (!is_colliding &amp;&amp; !is_hit &amp;&amp; !is_vulnerable) {
    if (direction == directions.UP) {
        sprite_index = asset_get_index(sprite_prefix + "up")
    } else if (direction == directions.DOWN) {
        sprite_index = asset_get_index(sprite_prefix + "down")
    } else if (direction == directions.LEFT) {
        sprite_index = asset_get_index(sprite_prefix + "left")
    } else if (direction == directions.RIGHT) {
        sprite_index = asset_get_index(sprite_prefix + "right")
    }
}

// debug
/*
count++
if (count % 180 &lt; 90) {
    // sprite_index = mask_index
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If is colliding with ropes AND being hurt, trigger elimination
if (is_colliding_with_ropes &amp;&amp; is_hit) {
    speed = 4
    image_speed = .1
    direction = collision_direction
    image_index = 0
    image_xscale = 1
    is_eliminated = true
    
    if (direction == directions.UP) {
        sprite_index = asset_get_index(sprite_prefix + "elim_up")
    } else if (direction == directions.DOWN) {
        sprite_index = asset_get_index(sprite_prefix + "elim_down")
    } else if (direction == directions.LEFT) {
        sprite_index = asset_get_index(sprite_prefix + "elim_left")
    } else if (direction == directions.RIGHT) {
        image_xscale = -1
        sprite_index = asset_get_index(sprite_prefix + "elim_left")
    }
    
    enemy_eliminated(sprite_prefix)
    
    alarm[11] = 2 * room_speed
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change depth based on y value

depth = -500 - y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions with player

if (!obj_player_2.is_eliminated) {

    is_colliding = false
    
    // On collisions, set direction and push to edge we are pushing (so enemy doesn't end up inside player)
    if (obj_player_2.direction == directions.LEFT &amp;&amp; place_meeting(x + speed, y, obj_player_2)) {
        // Hit from right
        collision_direction = directions.LEFT
        is_colliding = true
    } else if (obj_player_2.direction == directions.RIGHT &amp;&amp; place_meeting(x - speed, y, obj_player_2)) {
        // Hit from left
        collision_direction = directions.RIGHT
        is_colliding = true
    } else if (obj_player_2.direction == directions.UP &amp;&amp; place_meeting(x, y + speed, obj_player_2)) {
        // Hit from bottom
        collision_direction = directions.UP
        is_colliding = true
    } else if (obj_player_2.direction == directions.DOWN &amp;&amp; place_meeting(x, y - speed, obj_player_2)) {
        // Hit from right
        collision_direction = directions.DOWN
        is_colliding = true 
    }
    
    
    if (is_colliding &amp;&amp; is_vulnerable &amp;&amp; !obj_player_2.is_hit) {
        // Call function to do w/e the enemy should do on collision
        event_user(0)
        
        // Play punch sounds
        soundToPlay = choose(sound_hit_1, sound_hit_2, sound_hit_4)
    
        if (global.soundEnabled
            &amp;&amp; !audio_is_playing(sound_hit_1) 
            &amp;&amp; !audio_is_playing(sound_hit_2)
            &amp;&amp; !audio_is_playing(sound_hit_4)) {
            
            audio_play_sound(soundToPlay, 50, false);
        }
    
    } else if (is_colliding &amp;&amp; !is_vulnerable) {
        obj_player_2.collision_direction = direction
        with (obj_player_2) {
            event_user(0)
        }
    }

}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Don't check anything else if we're eliminated
if (is_eliminated) {
    depth = -2001
    return true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check collisions with ring bounding box. 
// Move opposite direction if we would be going out

height = sprite_height
width = sprite_width

// Normal bounds checks
// For each, set flag that we're colliding so we can handle it in next step
is_colliding_with_ropes = false
direction_before_rope_collision = direction

if (direction == directions.LEFT &amp;&amp; !place_meeting(x - speed, y, obj_ring_bounds)) {
    // Left bounds
    direction = choose(directions.RIGHT, directions.UP, directions.DOWN)
    is_colliding_with_ropes = true
} else if (direction == directions.RIGHT &amp;&amp; !place_meeting(x + speed, y, obj_ring_bounds)) {
    // Right bounds
    direction = choose(directions.UP, directions.LEFT, directions.DOWN)
    is_colliding_with_ropes = true
} else if (direction == directions.DOWN &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Down bounds
    direction = choose(directions.UP, directions.LEFT, directions.RIGHT)
    is_colliding_with_ropes = true
} else if (direction == directions.UP &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Up bounds
    direction = choose(directions.DOWN, directions.LEFT, directions.RIGHT)
    is_colliding_with_ropes = true
}

// Corner checks
if (!place_meeting(x - speed, y, obj_ring_bounds) &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Top left bounds
    direction = choose(directions.RIGHT, directions.DOWN)
} else if (!place_meeting(x + speed, y, obj_ring_bounds) &amp;&amp; !place_meeting(x, y - speed, obj_ring_bounds)) {
    // Top Right bounds
    direction = choose(directions.LEFT, directions.DOWN)
} else if (!place_meeting(x + speed, y, obj_ring_bounds) &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Down bounds
    direction = choose(directions.UP, directions.LEFT)
} else if (!place_meeting(x - speed, y, obj_ring_bounds) &amp;&amp; !place_meeting(x, y + speed, obj_ring_bounds)) {
    // Up bounds
    direction = choose(directions.UP, directions.RIGHT)
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
