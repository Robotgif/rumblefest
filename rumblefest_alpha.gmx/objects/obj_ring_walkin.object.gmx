<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_en_walkin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>650</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions with wall
// Normal state when roaming
if ((state == states.ROAMING) 
    &amp;&amp; place_meeting(x, y, obj_wall_en)) {

    // "Momentum" will take enemy into the colliding object,
    // so push away from ropes (using 400x400 as a general center of the ring)
    // TODO: Could be improved based on incoming position
    while (!place_free(x, y)) {
        if (y &lt; 400) {
            y = y + speed;
        } else {
            y = y - speed;
        }
        
        if (x &lt; 400) {
            x = x + speed;
        } else {
            x = x - speed;
        }
        
    }
    // Call event to change direction
    event_user(1)

    
} else if (state == states.BEING_HIT) {

    // Get x and y deltas from directions
    switch (direction) {
    case directions.UP:
        xd = 0
        yd = 0 + speed;
        break;
    case directions.DOWN:
        xd = 0
        yd = 0 + speed;
        break;
    case directions.LEFT:
        xd = 0 - speed
        yd = 0;
        break;
    case directions.RIGHT:
        xd = 0 + speed;
        yd = 0;
        break;
    }
    
    // Check if colliding, only proceed if yes
    shouldContinue = true
    if (!place_meeting(x + xd, y + yd, obj_wall_en)) {
        shouldContinue = false;
    }
    
    // Debug, prob won't work for all enemies
    // Just checking x/y coords that happen when we collide with ropes as opposed
    // to checking actual collision directions which were wonky
    
    // Outer if because "return()" was fucking up
    if (shouldContinue) {
    
        if (x &lt;= 136) {
            expectedDirection = directions.LEFT;
            moveDirection = "left";
        } else if (x &gt;= 632) {
            expectedDirection = directions.RIGHT;
            moveDirection = "right";
        } else if (y &lt;= 390) {
            expectedDirection = directions.UP;
            moveDirection = "back";
        } else {
            expectedDirection = directions.DOWN;
            moveDirection = "front";
        }
        
        
        // Only change to eliminated if direction matches actual direction
        if (direction == expectedDirection) {
            wiggly_ropes(moveDirection)
            enemy_eliminated(spritePrefix);
            state = states.ELIMINATED
        }
    
    }
    
} else if (state == states.HIT_BY_WEAPON &amp;&amp; place_meeting(x, y, obj_wall_en)) {
    
    // Go over ropes when being hit by weapon
    wiggly_ropes(moveDirection)
    direction = moveDirection;
    speed = 4;
    
    // Reset alarms so they don't fuck with us
    alarm[0] = -1;
    alarm[1] = -1;
    alarm[10] = -1;
    alarm[11] = -1;
    
    enemy_eliminated(spritePrefix);
    state = states.ELIMINATED
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_entrance_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0

instance_change(asset_get_index(entranceObjString), true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
